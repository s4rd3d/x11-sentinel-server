commit 39f9adbe008d71ce8e14c26ce7b3a2482da8579a
Author: David Sandor <dsandor@cursorinsight.com>
Date:   Sun Sep 11 17:37:04 2022 +0200

    feat: Integrate PostgreSQL database

diff --git a/Dockerfile b/Dockerfile
index ec24329..712b045 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -79,10 +79,11 @@ ARG APP_PORT=8081
 #
 # * `libstdc++` is required by jiffy
 # * `ncurses` is required by ERTS
+# * `postgresql-client` is required to set up the database
 #
 RUN --mount=type=cache,id=apk-global,sharing=locked,target=/var/cache/apk \
     ln -s /var/cache/apk /etc/apk/cache && \
-    apk add --update libstdc++ ncurses
+    apk add --update libstdc++ ncurses postgresql-client
 
 # Set up a destination for the application
 WORKDIR /opt/app
diff --git a/config/development.config b/config/development.config
index cbbcef4..a1e4073 100644
--- a/config/development.config
+++ b/config/development.config
@@ -11,5 +11,11 @@
                     burst_limit_enable => false}}}
     ]}]},
 
- {x11_sentinel_server, []}
+ {x11_sentinel_server, [
+   {db_host, "localhost"},
+   {db_username, "postgres"},
+   {db_password, "postgres"},
+   {db_port, 5432},
+   {db_name, "xss"}
+ ]}
 ].
diff --git a/config/production.config.src b/config/production.config.src
index d1876f6..21c370c 100644
--- a/config/production.config.src
+++ b/config/production.config.src
@@ -12,6 +12,11 @@
     ]}]},
 
  {x11_sentinel_server, [
-   {port, ${APP_PORT}}
+   {port, ${APP_PORT}},
+   {db_host, "${APP_DB_HOST}"},
+   {db_username, "${APP_DB_USERNAME}"},
+   {db_password, "${APP_DB_PASSWORD}"},
+   {db_port, ${APP_DB_PORT}},
+   {db_name, "${APP_DB_NAME}"}
  ]}
 ].
diff --git a/docker-compose.override.test.yml b/docker-compose.override.test.yml
new file mode 100644
index 0000000..1f5afb3
--- /dev/null
+++ b/docker-compose.override.test.yml
@@ -0,0 +1,6 @@
+version: '3.9'
+
+services:
+  db:
+    ports:
+    - "5432:5432"
diff --git a/docker-compose.yml b/docker-compose.yml
index b66918a..3a8b666 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -18,6 +18,33 @@ services:
     # Build time variables
     - REBAR_PROFILE
     # Runtime variables
+    - APP_DB_HOST
+    - APP_DB_USERNAME
+    - APP_DB_PASSWORD
+    - APP_DB_PORT
+    - APP_DB_NAME
     - APP_SECRET_COOKIE
     - NODE_NAME
     - RUNTIME_ENV
+    networks:
+    - x11_sentinel_server
+  db:
+    image: postgres:11
+    environment:
+    # Runtime variables
+    - POSTGRES_USER
+    - POSTGRES_PASSWORD
+    networks:
+     - x11_sentinel_server
+    restart: unless-stopped
+    volumes:
+     - db-data:/var/lib/postgresql/data
+
+networks:
+  x11_sentinel_server:
+    driver: bridge
+    external: true
+    name: x11_sentinel_server
+
+volumes:
+  db-data:
diff --git a/env.local b/env.local
index 7b432e7..7db4488 100644
--- a/env.local
+++ b/env.local
@@ -1,3 +1,7 @@
+#-------------------------------------------------------------------------------
+# Backend
+#-------------------------------------------------------------------------------
+
 # Common variables
 APP_NAME=x11_sentinel_server
 APP_PORT=8084
@@ -6,6 +10,19 @@ APP_PORT=8084
 REBAR_PROFILE=production
 
 # Runtime variables
+APP_DB_HOST=db
+APP_DB_USERNAME=xss
+APP_DB_PASSWORD=secret
+APP_DB_PORT=5432
+APP_DB_NAME=xss
 APP_SECRET_COOKIE=HHyNZSeUrRbkNREyFlngmKGSrwbKlraqvXpRpJRojrIVZCkUAcoOGmyANCXr
 NODE_NAME=x11_sentinel_server@x11_sentinel_server_local_1
 RUNTIME_ENV=local
+
+#-------------------------------------------------------------------------------
+# Database
+#-------------------------------------------------------------------------------
+
+# Runtime variables
+POSTGRES_USER=postgres
+POSTGRES_PASSWORD=postgres
diff --git a/priv/migration_scripts/01_initialize_db_DOWN.sql b/priv/migration_scripts/01_initialize_db_DOWN.sql
new file mode 100644
index 0000000..0621c6d
--- /dev/null
+++ b/priv/migration_scripts/01_initialize_db_DOWN.sql
@@ -0,0 +1,5 @@
+DROP OWNED BY xss;
+
+DROP USER xss;
+
+DROP DATABASE xss;
diff --git a/priv/migration_scripts/01_initialize_db_UP.sql b/priv/migration_scripts/01_initialize_db_UP.sql
new file mode 100644
index 0000000..295465f
--- /dev/null
+++ b/priv/migration_scripts/01_initialize_db_UP.sql
@@ -0,0 +1,3 @@
+CREATE DATABASE xss;
+
+CREATE USER xss WITH PASSWORD 'secret';
diff --git a/priv/migration_scripts/02_initialize_tables_DOWN.sql b/priv/migration_scripts/02_initialize_tables_DOWN.sql
new file mode 100644
index 0000000..8765787
--- /dev/null
+++ b/priv/migration_scripts/02_initialize_tables_DOWN.sql
@@ -0,0 +1 @@
+DROP SCHEMA xss CASCADE;
diff --git a/priv/migration_scripts/02_initialize_tables_UP.sql b/priv/migration_scripts/02_initialize_tables_UP.sql
new file mode 100644
index 0000000..0492541
--- /dev/null
+++ b/priv/migration_scripts/02_initialize_tables_UP.sql
@@ -0,0 +1,9 @@
+BEGIN;
+
+CREATE SCHEMA xss;
+
+GRANT USAGE ON SCHEMA xss TO xss;
+
+GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA xss TO xss;
+
+COMMIT;
diff --git a/rebar.config b/rebar.config
index 269c14b..0088c17 100644
--- a/rebar.config
+++ b/rebar.config
@@ -7,7 +7,8 @@
 {deps, [
         % External dependencies
         cowboy,
-        jiffy
+        jiffy,
+        epgsql
        ]}.
 
 % Default application configurations for production environment
diff --git a/rebar.lock b/rebar.lock
index a18aefd..27a754f 100644
--- a/rebar.lock
+++ b/rebar.lock
@@ -1,17 +1,20 @@
 {"1.2.0",
 [{<<"cowboy">>,{pkg,<<"cowboy">>,<<"2.9.0">>},0},
  {<<"cowlib">>,{pkg,<<"cowlib">>,<<"2.11.0">>},1},
+ {<<"epgsql">>,{pkg,<<"epgsql">>,<<"4.6.1">>},0},
  {<<"jiffy">>,{pkg,<<"jiffy">>,<<"1.1.1">>},0},
  {<<"ranch">>,{pkg,<<"ranch">>,<<"1.8.0">>},1}]}.
 [
 {pkg_hash,[
  {<<"cowboy">>, <<"865DD8B6607E14CF03282E10E934023A1BD8BE6F6BACF921A7E2A96D800CD452">>},
  {<<"cowlib">>, <<"0B9FF9C346629256C42EBE1EEB769A83C6CB771A6EE5960BD110AB0B9B872063">>},
+ {<<"epgsql">>, <<"D9647EC2933D9D2355CABAD14355A0CD005A865D1E1D1FD7E17F13D37F8182F4">>},
  {<<"jiffy">>, <<"ACA10F47AA91697BF24AB9582C74E00E8E95474C7EF9F76D4F1A338D0F5DE21B">>},
  {<<"ranch">>, <<"8C7A100A139FD57F17327B6413E4167AC559FBC04CA7448E9BE9057311597A1D">>}]},
 {pkg_hash_ext,[
  {<<"cowboy">>, <<"2C729F934B4E1AA149AFF882F57C6372C15399A20D54F65C8D67BEF583021BDE">>},
  {<<"cowlib">>, <<"2B3E9DA0B21C4565751A6D4901C20D1B4CC25CBB7FD50D91D2AB6DD287BC86A9">>},
+ {<<"epgsql">>, <<"EF3515B307FBDC429AF7EFDAD541F0E90978513B9DF3E4EDB76473B2B47C393E">>},
  {<<"jiffy">>, <<"62E1F0581C3C19C33A725C781DFA88410D8BFF1BBAFC3885A2552286B4785C4C">>},
  {<<"ranch">>, <<"49FBCFD3682FAB1F5D109351B61257676DA1A2FDBE295904176D5E521A2DDFE5">>}]}
 ].
diff --git a/src/x11_sentinel_server.app.src b/src/x11_sentinel_server.app.src
index 6f81532..e9deb31 100644
--- a/src/x11_sentinel_server.app.src
+++ b/src/x11_sentinel_server.app.src
@@ -7,7 +7,8 @@
    [kernel,
     stdlib,
     cowboy,
-    jiffy
+    jiffy,
+    epgsql
    ]},
   {mod, {x11_sentinel_server_app, []}}
  ]}.
diff --git a/src/x11_sentinel_server_sup.erl b/src/x11_sentinel_server_sup.erl
index 31c8c25..a313d01 100644
--- a/src/x11_sentinel_server_sup.erl
+++ b/src/x11_sentinel_server_sup.erl
@@ -43,5 +43,10 @@ init(_Config = #{}) ->
     SupFlags = #{strategy => one_for_one,
                  intensity => 3,
                  period => 1},
-    ChildSpecs = [],
+    ChildSpecs = [#{id => xss_database_server,
+                    start => {xss_database_server, start_link, []},
+                    restart => permanent,
+                    shutdown => 1000,
+                    type => worker,
+                    modules => [xss_database_server]}],
     {ok, {SupFlags, ChildSpecs}}.
diff --git a/src/xss_database_server.erl b/src/xss_database_server.erl
new file mode 100644
index 0000000..54db9de
--- /dev/null
+++ b/src/xss_database_server.erl
@@ -0,0 +1,152 @@
+%%%-----------------------------------------------------------------------------
+%%% @doc TODO
+%%% @end
+%%%-----------------------------------------------------------------------------
+
+-module(xss_database_server).
+-include("x11_sentinel_server.hrl").
+-behaviour(gen_server).
+
+%%%=============================================================================
+%%% Exports
+%%%=============================================================================
+
+%% `gen_server' API
+-export([start_link/0]).
+
+%% `gen_server' callbacks
+-export([init/1,
+         handle_call/3,
+         handle_cast/2,
+         terminate/2
+        ]).
+
+%% Exported functions
+-export([execute/1]).
+
+%%%=============================================================================
+%%% Macros
+%%%=============================================================================
+
+-define(TIMEOUT, 5000). % 5 seconds
+
+%%%=============================================================================
+%%% Records
+%%%=============================================================================
+
+%% Internal `gen_server' state
+-record(state, {connection :: epgsql:connection()}).
+
+%%%=============================================================================
+%%% Types
+%%%=============================================================================
+
+%% Internal `gen_server' state
+-type state() :: #state{}.
+
+%%%=============================================================================
+%%% Exported functions
+%%%=============================================================================
+
+%%------------------------------------------------------------------------------
+%% @doc Execute a query on the database.
+%% @end
+%%------------------------------------------------------------------------------
+-spec execute(Query) -> Reply | [Reply] when
+      Query :: epgsql:sql_query(),
+      Reply :: epgsql_cmd_equery:response() | epgsql_sock:error().
+execute(Query) ->
+    gen_server:call(?MODULE, {execute, Query}).
+
+%%------------------------------------------------------------------------------
+%% @doc Start `gen_server'.
+%% @end
+%%------------------------------------------------------------------------------
+-spec start_link() -> {ok, pid()} | ignore | {error, term()}.
+start_link() ->
+    gen_server:start_link({local, ?MODULE},
+                          ?MODULE,
+                          [],
+                          [{timeout, ?TIMEOUT}]).
+
+%%------------------------------------------------------------------------------
+%% @doc Initialize the server.
+%% @end
+%%------------------------------------------------------------------------------
+-spec init(Args) -> {ok, State} when
+      Args :: [any()],
+      State :: state().
+init([]) ->
+    % Set up database connection.
+    {ok, DbHost} = application:get_env(?APPLICATION, db_host),
+    {ok, DbUsername} = application:get_env(?APPLICATION, db_username),
+    {ok, DbPassword} = application:get_env(?APPLICATION, db_password),
+    {ok, DbPort} = application:get_env(?APPLICATION, db_port),
+    {ok, DbName} = application:get_env(?APPLICATION, db_name),
+
+    {ok, Connection} = epgsql:connect(#{host => DbHost,
+                                        username => DbUsername,
+                                        password => DbPassword,
+                                        port => DbPort,
+                                        database => DbName}),
+
+    {ok, _InitialState = #state{connection = Connection}}.
+
+%%------------------------------------------------------------------------------
+%% @doc Handle synchronous requests.
+%% @end
+%%------------------------------------------------------------------------------
+-spec handle_call(Request, From, State) -> Result when
+      Request :: term(),
+      From :: {pid(), Tag},
+      Tag :: term(),
+      State :: state(),
+      Result :: {reply, Reply, state()} |
+                {reply, Reply, state(), timeout()} |
+                {noreply, state()} |
+                {noreply, state(), timeout()} |
+                {stop, Reason, Reply, state()} |
+                {stop, Reason, state()},
+      Reply :: term(),
+      Reason :: term().
+handle_call({execute, Query}, _From, #state{connection = Connection} = State) ->
+    Reply = epgsql:equery(Connection, Query),
+    {reply, Reply, State};
+handle_call(Request, From, State) ->
+    ok = logger:warning(#{message => "Unhandled handle_call/3",
+                          request => Request,
+                          from => From,
+                          state => State}),
+    {reply, {bad_request, ?MODULE, Request}, State}.
+
+%%------------------------------------------------------------------------------
+%% @doc Handle asynchronous requests.
+%% @end
+%%------------------------------------------------------------------------------
+-spec handle_cast(Msg, State) -> Result when
+      Msg :: term(),
+      State :: state(),
+      Result :: {noreply, state()} |
+                {noreply, state(), timeout()} |
+                {stop, Reason, state()},
+      Reason :: term().
+handle_cast(Request, State) ->
+    ok = logger:warning(#{message => "Unhandled handle_cast/2",
+                          request => Request,
+                          state => State}),
+    {noreply, State}.
+
+%%------------------------------------------------------------------------------
+%% @doc Clean up the gen_server state.
+%% @end
+%%------------------------------------------------------------------------------
+-spec terminate(Reason, State) -> any() when
+      Reason :: term(),
+      State :: state().
+terminate(_Reason, #state{connection = Connection}) ->
+    ok = epgsql:close(Connection),
+    ok.
+
+%%%=============================================================================
+%%% Internal functions
+%%%=============================================================================
diff --git a/test/x11_sentinel_server_SUITE.erl b/test/x11_sentinel_server_SUITE.erl
index 18de47b..c176b5c 100644
--- a/test/x11_sentinel_server_SUITE.erl
+++ b/test/x11_sentinel_server_SUITE.erl
@@ -24,6 +24,13 @@
 %% Test server's default port
 -define(DEFAULT_PORT, 8084).
 
+%% Database connection options
+-define(DB_HOST, "localhost").
+-define(DB_USERNAME, "postgres").
+-define(DB_PASSWORD, "postgres").
+-define(DB_PORT, 5432).
+-define(DB_NAME, "xss").
+
 %%%=============================================================================
 %%% CT callback
 %%%=============================================================================
@@ -35,7 +42,8 @@
 -spec all() -> Result when
       Result :: [ct_suite:ct_testname()].
 all() ->
-    [http_connectivity_test].
+    [http_connectivity_test,
+     db_connectivity_test].
 
 %%%-----------------------------------------------------------------------------
 %%% Test suite init/end
@@ -54,6 +62,12 @@ init_per_suite(Config) ->
                             #{level => debug,
                               config => #{file => "log/debug.log"}}),
     {ok, _} = application:ensure_all_started(gun),
+
+    ok = application:set_env(?APPLICATION, db_host, ?DB_HOST),
+    ok = application:set_env(?APPLICATION, db_username, ?DB_USERNAME),
+    ok = application:set_env(?APPLICATION, db_password, ?DB_PASSWORD),
+    ok = application:set_env(?APPLICATION, db_port, ?DB_PORT),
+    ok = application:set_env(?APPLICATION, db_name, ?DB_NAME),
     {ok, _} = application:ensure_all_started(?APPLICATION),
     Config.
 
@@ -108,7 +122,17 @@ http_connectivity_test(_Config) ->
                       application:get_env(?APPLICATION, port, ?DEFAULT_PORT)),
     StreamRef = gun:head(ConnPid, "/"),
     ?assertMatch({response, fin, _, _Headers}, gun:await(ConnPid, StreamRef)),
+    ok.
 
+%%------------------------------------------------------------------------------
+%% @doc Check the database connection by a simple query.
+%% @end
+%%------------------------------------------------------------------------------
+-spec db_connectivity_test(Config) -> ok when
+      Config :: ct_suite:ct_config().
+db_connectivity_test(_Config) ->
+    ?assertMatch({ok, _Columns, [{4}]},
+                 xss_database_server:execute(<<"SELECT 2 + 2">>)),
     ok.
 
 %%%=============================================================================
